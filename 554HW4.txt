//HW4 Yang Gan
//758916858
#include <string>
#include <list>
#include <vector>
using namespace std;

template <class T> class ThreeD {
public:
	T ht;
	T wid;
	T dep;
	ThreeD() { ht = wid = dep = 0; }
	ThreeD(T i) { ht = wid = dep = i; }
	ThreeD(T a, T b, T c) { ht = a; wid = b; dep = c; }
	T getVol() { return ht * wid * dep; }
	//two objects are equal if their getVol() return the same value.
 bool operator ==(ThreeD<T> &a) {
		if (a.getVol() == getVol()) return true;
		return false;
	}
};

template <class T> class node {
public:
	T value;
	node<T>* next;
	node<T>* previous;
	node<T>() { next = nullptr; previous = nullptr; }
	node<T>(T v) { value = v; next = nullptr; previous = nullptr; }
	bool operator ==(const node<T> a) const{
		return a.value == value;
	}
};

template <class T> class linked_list {
public:
	node<T>* head; //position of first node
	node<T>* tail; //position of last node
	linked_list() { head = tail = nullptr; }
	void push_front(T t);
	void push_back(T t);
	linked_list(const initializer_list<T>& I);
	bool operator ==(const linked_list& a) const {
		node<T>* temp = a.head;
		node<T>* temp2 = head;
		while (temp != nullptr && temp2 != nullptr) {
			if (temp->value == temp2->value)
			{
				temp = temp->next;
				temp2 = temp2->next;

			}
			else return false;
		}
		if (temp == temp2) return true;
		return false;
	}
};

//template<class X>bag<X>::bag(const initializer_list<X>& I) :bag() {
template<class T> linked_list<T>::linked_list(const initializer_list<T>& I) :linked_list(){
	auto it = I.begin();
	head = nullptr;
	tail = nullptr;
	while (it != I.end()) {
		node<T>* temp = new node<T>(*it);
		temp->previous = tail;
		if (tail != nullptr)tail->next = temp;
		tail = temp;
		if (head == nullptr)head = temp;
		it++;
	}
}

template<class T> void linked_list<T>::push_front(T t) {
	if (head == nullptr) {
		head = new node<T>(t);
		tail = head;
	}
	else {
		head->previous = new node<T>(t);
		head->previous->next = head;
		head = head->previous;
	}
}

template<class T> void linked_list<T>::push_back(T t) {
	if (tail == nullptr) {
		tail = new node<T>(t);
		head = tail;
	}
	else {
		tail->next = new node<T>(t);
		tail->next->previous = tail;
		tail = tail->next;
	}
}

template <class X>
class item {
public:
	X data;
	item<X>* next;
	item<X>* previous;
	item<X>(X d) { data = d; next = nullptr; previous = nullptr; }
};

template <class X>
class bag {
public:
	item<X>* first; //position of first item
	item<X>* last; //positon of last item
	int num_items;
	int size() { return num_items; }
	bag() { first = nullptr; last = nullptr; num_items = 0; }
	void push_back(X d);  //insert an item with data d to the back of the bag
	void push_front(X d); //insert an item with data d to the front of the bag
	void pop_back(); //delete the last item in the bag
	void pop_front(); //delete the first item in the bag
	X& operator[](int i); //Access bag item with index. 
	X front() {
		if (first != nullptr)
			return first->data;  //it returns the data of the first item in the bag.
				 //if (num_items == 0) do nothing;
				 //else return first->data;
	}
	X back() {
		if (last != nullptr)
			return last->data;//it returns the data of the last item in the bag
			   /*
			   if (num_items == 0) do nothing;
			   else return last->data;
			   */
	}
	void clear(); //Delete all items in the bag
	item<X>* find(X d){
	
		if (first == nullptr) return nullptr;
		else {
			item<X>* temp = first;
			while (temp != nullptr) {
				//	X ans = temp->data;
				if (temp->data == d) return temp;
				temp = temp->next;
			}
			return nullptr;
		}
	} //return nullptr if no match for find or if the bag is empty.
						 //else, return the position of the matched item
	void erase(int index);
	void erase(item<X>* p);
	item<X>* insert(item<X>* p, X d); //insert data d to the position before p and return the position of the inserted item
	bag(const initializer_list<X>& I);
	bag<X>(bag<X>&& b) {
		num_items =b.num_items;
		first = b.first;
		last = b.last;
	}
	bag<X>& operator=(const bag<X>& B) {
		num_items = B.num_items;
		first = last = nullptr;
		item<X>* p1 = B.first;
		while (p1 != nullptr) {
			push_back(p1->data);
			p1 = p1->next;
		}
		return *this;
	}
	bag<X>(const bag<X>& B){
		num_items = B.num_items;
		first = last = nullptr;
		item<X>* p1 = B.first;
		while (p1 != nullptr) {
			push_back(p1->data);
			p1 = p1->next;
		}
	}
}; 

template<class X> item<X>* bag<X>::insert(item<X>* p, X d) {
	item<X>* temp = first;
	item<X>* dummy = nullptr;
	while (temp != nullptr)
	{
		if (temp == p) {
			if (temp = first) {
				first->previous = new item<X>(d);
				first->previous->next = first;
				first = first->previous;
			}
			else {
			dummy = new item<X>(d);
			temp->previous->next = dummy;
			dummy->previous = temp->previous;
			temp->previous = dummy;
			dummy->next = temp;
			}
			num_items++;
			return dummy;
		}
		temp = temp->next;
	}
	return nullptr;
}

template<class X>bag<X>::bag(const initializer_list<X>& I):bag() {
	first = nullptr;
	last = nullptr;
	auto it = I.begin();
	while (it != I.end()) {
		item<X>* temp = new item<X>(*it);
		temp->previous = last;
		if (last != nullptr) last->next = temp;
		last = temp;
		if (first == nullptr)first = temp;
		it++;
	}
}


template<class X>void bag<X>::erase(int index) {
	item<X>* temp = first;
	int num = 0;
	while (temp != nullptr) {
		if (num == index) {
			if (temp == first && temp == last) {
				first = nullptr;
				last = nullptr;
			}
			else if (temp == first) {
				first = first->next;
				first->previous = nullptr;
			}

			else if (temp == last) {
				last = last->previous;
				last->next = nullptr;
			}
			else {
				temp->previous->next = temp->next;
				temp->next->previous = temp->previous;
			}
			auto* p = temp;
			delete p;
			return;
		}
		temp = temp->next;
		num++;
	}
}

template<class X>void bag<X>::erase(item<X>* p) {
	item<X>* temp = first;
	while (temp != nullptr) {
		if (temp == p) {
			if (temp == first && temp == last) {
				first = nullptr;
				last = nullptr;
			}
			else if (temp == first) {
				first = first->next;
				first->previous = nullptr;
			}
			else if (temp == last) {
				last = last->previous;
				last->next = nullptr;
			}
			else {
				temp->previous->next = temp->next;
				temp->next->previous = temp->previous;
			}
			auto* p = temp;
			delete p;
			return;
		}
		temp = temp->next;
	}
}

template<class X>void bag<X>::clear() {
	while (num_items != 0)
	{
		pop_front();
	}
}

template<class X>X& bag<X>::operator[] (int i) {
	auto temp = first;
	int count = 0;
	while (temp != nullptr) {
		if (count == i) return temp->data;
		temp = temp->next;
		count++;
	}
}

template <class X> void bag<X>::push_back(X d) {
	if (last == nullptr && first == nullptr) {
		first = new item<X>(d);
		last = first;
	}
	else {
		last->next = new item<X>(d);
		last->next->previous = last;
		last = last->next;
	}
	num_items++;
}

template <class X> void bag<X>::push_front(X d) {
	if (first == nullptr) {
		first = new item<X>(d);
		last = first;
	}
	else {
		first->previous = new item<X>(d);
		first->previous->next = first;
		first = first->previous;
	}
	num_items++;
}

template<class X>void bag<X>::pop_back() {
	if (last == nullptr)  return;
	else if (last == first) {
		auto* p = last;
		last = nullptr;
		first = nullptr;
		delete p;
	}
	else {
		auto* p = last;
		last = last->previous;
		last->next = nullptr;
		delete p;
	}
	num_items--;
}

template<class X>void bag<X>::pop_front() {
	if (first == nullptr) return;
	else if (last == first) {
		auto* p = last;
		last = nullptr;
		first = nullptr;
		delete p;
	}
	else {
		auto* p = first;
		first = first->next;
		first->previous = nullptr;
		delete p;
	}
	num_items--;
}

template<class T> ostream& operator<<(ostream& str, ThreeD<T>t) {
	str << "( " << t.ht << ", " << t.wid << ", " << t.dep << " )";
	return str;
}

template<class X> ostream& operator<<(ostream& str, vector<X>v) {
	if (!v.empty()) str << "[ ";
	for (auto i : v) {
		str << i << ", ";
	}
	if (!v.empty()) str << "] ";
	return str;
}

template<class T> ostream& operator<<(ostream& str, linked_list<T>l) {
	node<T>* temp = l.head;
	while (temp != nullptr) {
		str << temp->value << " ";
		temp = temp->next;
	}
	return str;
}

template<class X> ostream& operator<<(ostream& str, bag<X>B) {
	item<X>* temp = B.first;
	while (temp != nullptr) {
		str << temp->data << " ";
		temp = temp->next;
	}
	return str;
}

template<class X>ostream& operator<<(ostream& str, list<X>L) {
	if (!L.empty()) str << "[ ";
	for (auto i : L) {
		str << i << ", ";
	}
	if (!L.empty()) str << "] ";
	return str;
}


int main() {
	bag<double> bag_d;
	bag_d.push_back(5.5);
	bag_d.push_back(6.6);
	bag_d.push_front(4.4);
	bag_d.push_front(3.3);
	bag_d.pop_front();
	bag_d.pop_back();
	cout << bag_d << endl;;
	bag<int> bag_i;
	bag_i.push_back(5);
	bag_i.push_back(6);
	bag_i.push_front(4);
	bag_i.push_front(3);
	bag_i.pop_front();
	bag_i.pop_back();
	cout << bag_i << endl;
	ThreeD<int> td3(3), td4(4), td5(5), td6(6), td7(100, 200, 300);
	bag<ThreeD<int>> bag_3D;
	bag_3D.push_back(td5);
	bag_3D.push_back(td6);
	bag_3D.push_front(td4);
	bag_3D.push_front(td3);
	bag_3D.pop_front();
	bag_3D.pop_back();
	cout << bag_3D << endl;;
	cout << bag_3D.front() << bag_3D.back();
	cout << bag_3D[0] << " " << bag_3D[1] << endl;
	bag_3D[1] = td7;
	cout << bag_3D[0] << " " << bag_3D[1] << endl;
	bag_3D.clear();
	cout << bag_3D << endl;
	cout << bag_3D.size() << endl;
	linked_list<string>ls_1;
	ls_1.push_front("David");
	ls_1.push_front("John");
	ls_1.push_front("Pat");
	ls_1.push_front("Ben");
	ls_1.push_front("Jeff");
	cout << ls_1 << endl;

	linked_list<string>ls_2;
	ls_2.push_front("Wendy");
	ls_2.push_front("Mary");
	ls_2.push_front("Nancy");
	ls_2.push_front("Jennifer");
	cout << ls_2 << endl;

	bag<linked_list<string>> bag_string;

	bag_string.push_back(ls_1);

	bag_string.push_back(ls_2);

	cout << bag_string << endl;
	cout << bag_string[1] << endl;

	ThreeD<double> t10(3.2, 7.4, 8.9), t11(5.6, 7.7, 2.987), t12(4.6, 7.5, 3.1416), t13(55.6, 66.8, 333.45);
	linked_list<ThreeD<double>> LTD1;
	LTD1.push_front(t10);
	LTD1.push_front(t11);
	linked_list<ThreeD<double>> LTD2;

	LTD2.push_front(t13);
	LTD2.push_front(t12);
	LTD2.push_front(t10);
	LTD2.push_front(t11);
	bag<linked_list<ThreeD<double> > > BLTD;
	BLTD.push_back(LTD1);
	BLTD.push_back(LTD2);
	cout << BLTD << endl;
	item<linked_list<ThreeD<double>>>* p2;
	p2 = BLTD.find(LTD1);
	BLTD.erase(p2);
	cout << BLTD << endl;
	BLTD.push_back(LTD1);
	cout << BLTD << endl;
	BLTD.erase(0);
	cout << BLTD << endl;
	vector<ThreeD<int>> V1 = { { 1,2,3 },{ 4,5,6 },{ 7,8,9 } };
	cout << V1 << endl;
	//bag<bag<int>> V2 = { {1,2,3}, {4,5,6}, {7,8,9} };
	vector<bag<ThreeD<int>>> V2 = { { { 1,2,3 },{ 4,5,6 },{ 7,8,9 } },{ { 20,30,40 },{ 11,22,33 } } };
	cout << V2 << endl;
	list<bag<linked_list<int>>> V3 = { { { 1, 2, 3 },{ 4, 5 } },{ { 6,7 },{ 8, 9, 10 } } };
	cout << V3 << endl;
	bag<int> B10 = { 1,2,3,4,5 };
	bag<int> B11 = B10, B12;
	B12 = B10;
	cout << B10 << endl;
	B10.first->data = 1000;
	cout << B10 << endl;
	cout << B11 << endl;
	cout << B12 << endl;
	bag<list<linked_list<ThreeD<int>>>> B13 = { { { { 1,2,3 },{ 4,5,6 } },{ { 7,8,9 },{ 10,11,12 },{ 13,14,15 } } },{ { { 16,17,18 },{ 19,20,21 },{ 22,23,24 } },{ { 25,26,27 },{ 28,29,30 } },{ { 31,32,33 },{ 34,35,36 },{ 37,38,39 },{ 40,41,42 } } } };
	cout << B13 << endl;
	bag<bag<bag<ThreeD<int>>>> B14 = { { { { 1,2,3 },{ 4,5,6 } },{ { 7,8,9 },{ 10,11,12 },{ 13,14,15 } } },{ { { 16,17,18 },{ 19,20,21 },{ 22,23,24 } },{ { 25,26,27 },{ 28,29,30 } },{ { 31,32,33 },{ 34,35,36 },{ 37,38,39 },{ 40,41,42 } } } };
	cout << B14 << endl;
	bag<linked_list<int>>* p10 = new bag<linked_list<int>>({ { 1,2,3,4 },{ 5,6,7 } });
	cout << *p10 << endl;
	delete p10;
	bag<list<linked_list<ThreeD<int>>>> B15 = { { { { 1,2,3 },{ 4,5,6 } },{ { 7,8,9 },{ 10,11,12 },{ 13,14,15 } } },{ { { 16,17,18 },{ 19,20,21 },{ 22,23,24 } },{ { 25,26,27 },{ 28,29,30 } },{ { 31,32,33 },{ 34,35,36 },{ 37,38,39 },{ 40,41,42 } } } };
	cout << B15 << endl;
	B15.erase(1);
	cout << B15 << endl;
	bag<list<linked_list<ThreeD<int>>>> B16 = { { { { 1,2,3 },{ 4,5,6 } },{ { 7,8,9 },{ 10,11,12 },{ 13,14,15 } } },{ { { 16,17,18 },{ 19,20,21 },{ 22,23,24 } },{ { 25,26,27 },{ 28,29,30 } },{ { 31,32,33 },{ 34,35,36 },{ 37,38,39 },{ 40,41,42 } } } };
	list<linked_list<ThreeD<int>>> V4 = { { { 6,1,1 },{ 2,5,12 } },{ { 9,8,7 },{ 11,10,12 },{ 26,7,15 } } };
	list<linked_list<ThreeD<int>>> V5 = { { { 6,1,1 },{ 2,5,12 } },{ { 9,8,7 },{ 11,10,12 },{ 26,7,5 } },{ { 6,1,1 },{ 2,5,12 } } };
	B16.insert(B16.first, V5);
	cout << B16.front().size() << endl;
	item<list<linked_list<ThreeD<int>>> >*p20 = B16.find(V4);
	if (p20 != nullptr) 
	cout << (p20->data).size() << endl;
	getchar();
	getchar();
	return 0;
}

//The following is a screenshot of a sample output
/*
4.4 5.5
4 5
( 4, 4, 4 ) ( 5, 5, 5 )
( 4, 4, 4 )( 5, 5, 5 )( 4, 4, 4 ) ( 5, 5, 5 )
( 4, 4, 4 ) ( 100, 200, 300 )
0
Jeff Ben Pat John David
Jennifer Nancy Mary Wendy
Jeff Ben Pat John David  Jennifer Nancy Mary Wendy
Jennifer Nancy Mary Wendy
( 5.6, 7.7, 2.987 ) ( 3.2, 7.4, 8.9 )  ( 5.6, 7.7, 2.987 ) ( 3.2, 7.4, 8.9 ) ( 4.6, 7.5, 3.1416 ) ( 55.6, 66.8, 333.45 )
( 5.6, 7.7, 2.987 ) ( 3.2, 7.4, 8.9 ) ( 4.6, 7.5, 3.1416 ) ( 55.6, 66.8, 333.45 )
( 5.6, 7.7, 2.987 ) ( 3.2, 7.4, 8.9 ) ( 4.6, 7.5, 3.1416 ) ( 55.6, 66.8, 333.45 )  ( 5.6, 7.7, 2.987 ) ( 3.2, 7.4, 8.9 )
( 5.6, 7.7, 2.987 ) ( 3.2, 7.4, 8.9 )
[( 1, 2, 3 ), ( 4, 5, 6 ), ( 7, 8, 9 )]
[( 1, 2, 3 ) ( 4, 5, 6 ) ( 7, 8, 9 ) , ( 20, 30, 40 ) ( 11, 22, 33 ) ]
[1 2 3  4 5  , 6 7  8 9 10  ]
1 2 3 4 5
1000 2 3 4 5
1 2 3 4 5
1 2 3 4 5
[( 1, 2, 3 ) ( 4, 5, 6 ) , ( 7, 8, 9 ) ( 10, 11, 12 ) ( 13, 14, 15 ) ] [( 16, 17, 18 ) ( 19, 20, 21 ) ( 22, 23, 24 ) , ( 25, 26, 27 ) ( 28, 29, 30 ) , ( 31, 32, 33 ) ( 34, 35, 36 ) ( 37, 38, 39 ) ( 40, 41, 42 ) ]
( 1, 2, 3 ) ( 4, 5, 6 )  ( 7, 8, 9 ) ( 10, 11, 12 ) ( 13, 14, 15 )   ( 16, 17, 18 ) ( 19, 20, 21 ) ( 22, 23, 24 )  ( 25, 26, 27 ) ( 28, 29, 30 )  ( 31, 32, 33 ) ( 34, 35, 36 ) ( 37, 38, 39 ) ( 40, 41, 42 )
1 2 3 4  5 6 7
[( 1, 2, 3 ) ( 4, 5, 6 ) , ( 7, 8, 9 ) ( 10, 11, 12 ) ( 13, 14, 15 ) ] [( 16, 17, 18 ) ( 19, 20, 21 ) ( 22, 23, 24 ) , ( 25, 26, 27 ) ( 28, 29, 30 ) , ( 31, 32, 33 ) ( 34, 35, 36 ) ( 37, 38, 39 ) ( 40, 41, 42 ) ]
[( 1, 2, 3 ) ( 4, 5, 6 ) , ( 7, 8, 9 ) ( 10, 11, 12 ) ( 13, 14, 15 ) ]
3
2
*/